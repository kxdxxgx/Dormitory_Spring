<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace = "com.dormitory.mapper.MemberMapper">


    <!-- ====================2. Menu ==============================-->
    <!-- 1. 회원 정보 조회 -->
    <select id="getMemberInfo" parameterType="String"  resultType="com.dormitory.dto.MemberDTO">
        select * from tbl_member where userid = #{userid}
    </select>
    <!-- 2. 예약 정보 조회-->
    <select id="getReservationInfoById" parameterType="String"  resultType="com.dormitory.dto.ReservationDTO">
        select * from tbl_reservation where m_userid = #{m_userid}
    </select>
    <!--3. 예약 상태 변경 -->
    <update id="ReservationOut" parameterType="int">
        update tbl_reservation set s_status=2 where reservation_code = #{reservation_code}

    </update>

    <!-- 4. 방문 내역 (s_status가 4인 것만)-->
    <select id="getVisited" parameterType="String"  resultType="com.dormitory.dto.ReservationDTO">
        select * from tbl_reservation where m_userid = #{userid} and s_status=4
    </select>

    <!--5. 방문/예약 내역 삭제 -->
    <update id="DeleteVisited" parameterType="int">
        update tbl_reservation set s_status=5 where reservation_code = #{reservation_code}
    </update>

    <!--6. 리뷰 등록-->
    <insert id="setReview" parameterType="com.dormitory.dto.ReviewDTO" useGeneratedKeys="true" keyProperty="review_code">
        insert into tbl_review (d_code,r_code,m_userid,review_score,review_comment,reservation_code,r_name)
        values (#{d_code},#{r_code},#{m_userid},#{review_score},#{review_comment},#{reservation_code},#{r_name})
    </insert>

    <!--7. 사용자가 작성한 리뷰 조회-->
    <select id="getMemberReview" parameterType="String" resultType="com.dormitory.dto.ReviewDTO">
        SELECT * FROM tbl_review where m_userid = #{m_userid}
    </select>
    <!-- 리뷰 수정하기-->
    <update id="modifyReview" parameterType="com.dormitory.dto.ReviewDTO">
        update tbl_review set review_score = #{review_score} , review_comment = #{review_comment} where review_code = #{review_code}
    </update>
    <!--8. 사진 등록하기 -->
    <insert id="setImages" parameterType="HashMap">
        insert into tbl_file (file_review_code,review_stored,review_file,review_filesize,userid,checkfile,file_img)
                    values (#{review_code},#{review_stored},#{review_file},#{review_filesize},#{userid},#{checkfile},#{file_img})
    </insert>
    <!-- 사진 리스트 보기-->
    <select id="imagesInfoview" parameterType="int" resultType="com.dormitory.dto.FileDTO">
        select * from tbl_file where file_review_code = #{file_review_code} and checkfile = 'Y'
    </select>
    <!-- 첨부 파일 삭제를 위한 checkfile 정보 변경 -->
    <update id="fileInfoUpdate" parameterType="int">
        update tbl_file set checkfile = 'N' where file_seqno = #{file_seqno}
    </update>
    <!-- 리뷰 수정 시 파일 정보 수정(checkfile을 X로 변경) -->
    <update id="deleteFileList" parameterType="int">
        update tbl_file set checkfile = 'N' where fileseqno = #{fileseqno}
    </update>
    <!-- 파일이름 가져오기-->
    <select id="getFilename" resultType="String">
        SELECT review_stored
        FROM tbl_file
        where checkfile = 'Y';
    </select>
    <!-- review테이블에 d_code활용해서 dormitory테이블에 d_code가 똑같은 d_star 가져오기-->
    <select id="getDstar" parameterType="String" resultType="int">

    </select>
    
    <!-- ====================3. Reservation =======================-->
    <!-- 1. 숙소+객실 조회 -->
    <select id="getDormitoryRoom" parameterType="String" resultType="com.dormitory.dto.DormitoryRoomDTO">
        select * from tbl_dormitory inner join tbl_room_type on tbl_dormitory.d_code=tbl_room_type.d_code
        where r_code = #{r_code}
    </select>

    <!-- 2. 예약 회원 정보 -->
    <!-- 3. 예약 정보 저장 (POST)-->

    <insert id="postReservation" parameterType="com.dormitory.dto.ReservationDTO">
        insert into tbl_reservation(d_code,r_code,d_name,d_type,r_img,r_name,m_userid,m_telno,m_username,reservation_checkin,reservation_checkout,reservation_guest,reservation_price,reservation_description,d_discount,s_status,room)
        values(#{d_code},#{r_code},#{d_name},#{d_type},#{r_img},#{r_name},#{m_userid},#{m_telno},#{m_username},#{reservation_checkin},#{reservation_checkout},#{reservation_guest},#{reservation_price},#{reservation_description},#{d_discount},1,#{room})
    </insert>
    <!-- 4. 결제-->
    <insert id="getPayment" parameterType="com.dormitory.dto.PaymentDTO">
        insert into tbl_payment(merchant_uid,reservation_code,buyer_tel,buyer_name,paid_amount,paid_status,success)
                        values(#{merchant_uid},#{reservation_code},#{buyer_tel},#{buyer_name},#{paid_amount},#{paid_status},#{success})
    </insert>
    <!-- 4-1. 결제 환불 -->
    <update id="getPaymentCancel" parameterType="String">
        update tbl_payment set paid_amount=0,paid_status='cancel' where merchant_uid=#{merchant_uid}
    </update>

    <!-- 5. 취소별 환불 규정-->
    <select id="getCancelPolicy" parameterType="String" resultType="com.dormitory.dto.CancelDTO">
        select * from tbl_cancel where d_code=#{d_code}
    </select>

    <!-- 6. 예약 가능한 방 찾기 -->
    <select id="getAvailableRooms" parameterType="com.dormitory.dto.ReservationDTO" resultType="String">
        SELECT r.room
        FROM tbl_room AS r
        WHERE r.r_code = #{r_code}
        AND NOT EXISTS (
            SELECT 1
            FROM tbl_reservation AS res
            WHERE r.room = res.room
            AND r.r_code = res.r_code
            AND (
                res.reservation_checkin &lt; #{reservation_checkout}
                AND res.reservation_checkout &gt; #{reservation_checkin}
            )
        );
    </select>


    <!-- 이 밑으로 건들ㄴㄴ -->
    <select id="memberInfo" parameterType="String" resultType="com.dormitory.dto.MemberDTO">
        select * from tbl_member where userid=#{userid}
    </select>

    <!-- -->
    <insert id="memberSave" parameterType="com.dormitory.dto.MemberDTO">
        insert into tbl_member(userid, password,username, role, social) values(#{userid},#{password},#{username},#{role},#{social})
    </insert>


    <!-- 토큰에 해당하는 회원 정보 가져오기 -->
    <select id="getMemberInfoByToken" resultType="String">
        select * from tbl_member where token=#{token}
    </select>
    <!--토큰 저장하기 -->
    <update id="setToken" parameterType="com.dormitory.dto.MemberDTO">
        update tbl_member set token=#{token} where userid=#{userid}
    </update>



</mapper>